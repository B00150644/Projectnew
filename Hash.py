import sqlite3
from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
import base64
import os


#This script encrypts a given plaintext password using the AES encryption algorithm in EAX mode from the PyCryptodome library.
#The encryption process begins by creating a new AES cipher object with a predefined AES_KEY. EAX mode is used for encryption, 
#A unique nonce (number used once) is automatically generated by the cipher for each encryption session,
# ensuring that even if the same password is encrypted multiple times, the resulting ciphertext will be different. 
#The plaintext password is then encrypted and authenticated, and the nonce is added to the front of the ciphertext. 
#then the combined nonce and ciphertext are base64-encoded and returned as a string, making it ready for storage 

# Function to load or generate AES key
def load_or_generate_key():
    key_file = "aes_key.key"
    
    # If key file exists, load it
    if os.path.exists(key_file):
        with open(key_file, "rb") as f:
            return f.read()
    
    # Otherwise, generate a new key and save it
    new_key = get_random_bytes(32)  # AES-256 key
    with open(key_file, "wb") as f:
        f.write(new_key)
    return new_key

AES_KEY = load_or_generate_key()  # Load existing or create a new key

# Encrypts the password using AES in EAX mode, returning the combined random_value and ciphertext as a base64-encoded string.
def encrypt_password(plain_password):
    """Encrypts the password using AES."""
    cipher = AES.new(AES_KEY, AES.MODE_EAX)
    nonce = cipher.nonce
    ciphertext, tag = cipher.encrypt_and_digest(plain_password.encode())
    return base64.b64encode(nonce + ciphertext).decode()

